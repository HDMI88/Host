---> 1. All Lua scripts are shared by users so please test them carefully before using.
---> 2. Tips: Test with 0.1 DOGE or 1 DOGE for about 1 day to find the settings, the strategy that works best for you. For example:
-- You have 0.1 LTC, test with 0.1 Doge about 1 day to find the most effective strategy, least risk. Then apply that setting, that strategy to 0.1 LTC.
-- You have 0.001 BTC, test with 0.001 Doge about 1 day to find the most effective strategy, least risk. Then apply that strategy setting to 0.001 BTC.
-- Similar to other coins.
-- PLEASE STOP PLAYING WHEN PROFIT CHART OR MARKET IS FLAT OR SIDEWAYS.

-- SCRIPT 82

-- ### Settings ###
minimum_bet = 0.00000010

-- Start Bet
start_bet_first  = 0.00000010
start_bet_second = 0.00000500

-- Multiplier
multiplier_first  = 1.15
multiplier_second = 1.20

-- Lower Limit
lower_limit_first  = 0.00001500
lower_limit_second = 0.00100000

-- Wait Count
wait_count_first  = 0
wait_count_second = 15

-- Target
target_profit  = 0.00100000
target_balance = balance + target_profit

-- Stop if balance is below (0: diabled)
stop_balance = 0


-- ### Initialization ###
base_bet   = start_bet_first 
multiplier = multiplier_first
chance     = 10
bethigh    = true

lower_limit_base = lower_limit_first 
lower_limit      = lower_limit_base

wait_count_base = wait_count_first
wait_count      = wait_count_base

betcount     = 0
totalwin     = 0  
wincount     = 0
losecount    = 0
maxlosecount = 0
minlosecount = 9999
sumlosecount = 0

is_stop_increase = false

increase_start_balance = 0
saved_balance          = 0

start_balance = balance
nextbet       = minimum_bet


function set_lower_limit()
    print("[set_lower_limit]")
    lower_limit = balance - lower_limit_base
    print(" Lower Limit: " .. lower_limit)
end
set_lower_limit()


function dobet()
    resetseed()
    betcount = betcount + 1
    print("======== [" .. betcount .. "]")
    msg_balance = "Balance : " .. string.format("%.8f", balance)
    msg_goal    = " ( Target : " .. string.format("%.8f", target_balance) .. " )"
    msg_start   = " ( Start : " .. string.format("%.8f", start_balance) .. " )"
    print(msg_balance .. msg_start .. msg_goal)
    print("Profit : " .. string.format("%.8f", balance - start_balance))
    print("Lower Limit : " .. string.format("%.8f", lower_limit))
    
    print("----")
    print("Multiplier : " .. multiplier)
    print("Wait Count : " .. wait_count)
    if (is_stop_increase) then 
        print("# is_stop_increase : true") 
    end
    
    -- WIN
    if (win) then
        print("WIN")
        totalwin = totalwin + 1
        wincount = wincount + 1
        
        -- Save Balance
        increase_start_balance = balance
        if (saved_balance < balance) then
            -- Reset
            saved_balance    = 0
            wait_count_base  = wait_count_first
            wait_count       = wait_count_base
            lower_limit_base = lower_limit_first
            base_bet         = start_bet_first 
            multiplier       = multiplier_first
        else
            -- Set Wait Count
            wait_count = wait_count_base
        end
        
        -- Lose Count
        if (maxlosecount < losecount) then maxlosecount = losecount end
        if (losecount < minlosecount) then minlosecount = losecount end
        sumlosecount = sumlosecount + losecount
        losecount = 0

        -- Next Bet
        set_lower_limit()
        nextbet = minimum_bet
        
        -- Reset Flags  
        if (is_stop_increase) then is_stop_increase = false end
    end
   
    -- LOSE
    if (!win) then
        print("LOSE")
        wincount = 0 
        losecount = losecount + 1
        
        if (is_stop_increase) then
            nextbet = minimum_bet
        else
            if (wait_count > 0) then
                wait_count = wait_count - 1
            else
                if (previousbet == minimum_bet) then
                    if (minimum_bet == base_bet) then
                        nextbet = base_bet * multiplier
                    else
                        nextbet = base_bet
                    end
                else
                    nextbet = previousbet * multiplier
                end
            end
        end    

        -- stop losses
        next_balance = balance - nextbet
        if (next_balance <= lower_limit and !is_stop_increase) then
            print("[stop_losses] " .. string.format("%.8f", next_balance) .. " <= " .. string.format("%.8f", lower_limit))
            is_stop_increase = true
            nextbet          = minimum_bet
            -- Set Second
            wait_count_base  = wait_count_second
            wait_count       = wait_count_base
            lower_limit_base = lower_limit_second
            base_bet         = start_bet_second
            multiplier       = multiplier_second
            if (saved_balance == 0) then
                -- Save Balance
                saved_balance = increase_start_balance
            else
                -- Reset after half recovery
                numerical_difference = increase_start_balance - balance
                saved_balance        = balance + (numerical_difference / 2)
            end
            set_lower_limit()
        end
    end

    print("----")
    print("Total Win : " .. totalwin)
    msg_maxlosecount = " ( Max : " .. maxlosecount .. " )"
    msg_minlosecount = " ( Min : " .. minlosecount .. " )"
    msg_avelosecount = " ( Average : " .. sumlosecount / totalwin .. " )"    
    print("Lose Count : " .. losecount .. msg_maxlosecount .. msg_minlosecount .. msg_avelosecount)
    print("Saved Balance : " .. string.format("%.8f", saved_balance))
    print("Next Balance : " .. string.format("%.8f", next_balance))
    
    -- Stop
    if (0 < stop_balance and next_balance <= stop_balance) then
        print("Stop Lose!")
        stop()
    end
    if (target_balance < balance) then
        print("Stop Win!")
        ching()
        stop()
    end
 
end